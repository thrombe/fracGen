plan:
  . explain how generation works in comments
  \. try limiting anti-aliasing to selective area (like where there is more detail)
    \. how?
  . time estimators instead of percentage (wherever applicable)
  . 

try:
  . convolutions on fractals/random images
    . convolutions for anti-aliasing (bias)
  . mandlebrot, but mirror the point so that it always stays in the first quadrant
    . or some other variations of this kind
  \. superimpose mandlebrot on top of few already made buddhabrot images but in different color
  . smart long gaussian? blur like the computerphile video
  . the logistic curve or something (veritassium video)
  . lorenz attractor and ++ +3d?
  . chaos equations from code parade
  . the complex cellular automata from sabestian lague
  . 

rust stuff:
  . use command line arguments for ease
  . std::time::SystemTime::now()) - timestamp for filenames
  . 

rust buddhabrot:
  . tips for nicer images
    . increase the min_color or something (infinidump) to 15 to remove the background noise (if present)
    . keep similar colors in the lerp coloring method
    . keep more versions of same color and build it up slowly instead of jumping from 0 to 255
    . see what colors you enter before entering (helps a lot)
    . 
  . make it easier to change parameters. i.e. bring the playable parameters at one place
  . figure out which rng is better for this
  . julia buddhabrots ?
  . try using complex numbers instead of zx, zy (will need to create those first)
  \. 255*(hitcount/maxcount)^(1/gamma), now change gamma linearly
    \. super dark for what i can do in reasonable time (needs comparatively high hits)
  . histogram things in stat of infini-dump
  /. early bailout if inside mandlebrot set
    /. this is very specific to the mandlebrot set. so make it togglable somehow
    /. cardiod -> ((x-0.25)²+y²+x/2)²-((x-0.25)²+y²)/4 < 0
    /. circle -> (x-1)²+y²-(1/4)² < 0
  . do multiple color channels instead of just green
    . different iteration ranges for different channels
  . multiple color mapping from infinidump
    . histogram thing?
    . some color map (like those in the mandlebrot app)
      \. this is kinda similar to the lerp method. just that every color change is linear
  . maybe add the ability to add more trajectories (from the infinidump func)
  . randomly coloring the the BIG orbits (10^6 ~~ )
  . cache the 'good' points
  /. do time thing in infinidump
    . do this better
  . 

rust mandlebrot:
  . shift x loop outside the threads, to see how slow it gets.
  . try threadpool and stuff (rayon ?)
    . the current methods already provides good performance for every core tho
  . read and implement better color methods from the pdf i found
  . 

findsol:
  . try to figure out how many digits are good. ie find the error in calculations
  . get a function to calculate intersection of 2 curves
    . this works for only y = f(x) type functions
      /. can do this by f1(x, y)-f2(x, y) and then flip x and y
      /. subtracting values of functions brings down the solution to y == 0
        and flipping x and y gets them on y axis instead.
        so all that needs to be done after that is call findsol(0, ...)
    . 
  . it seems like there is no easy solution to the two precision problems below.
    . cuz it would need more digits in functions like sin, cos, log etc that are used in s()
    . so first, more digits in sub functions are needed
    . then more digits in calculations of s()
    . and more digits in value of y
  . precision
    . seems like 10^-16 is the max precision (for value of s) :( 
      (it dosent mean solution has this many digits of accuracy :( its a few digits less (10 ish decimal places))
    . the problem happens cuz (i think) dy gets too small to chnage the y value. (too precise compared to y)
    . the problem will get worse as the solution y coord gets higher (ie gain more digits to the left)
    . this should be fixable by bringing the solution down to the x axis
      so if we want more digits, maybe change equation in such a way that the current known sol lies on x axis
    . tho this still wont fix the prob for too long. but maybe can gain a few digits of precision
    . 
  . precision 2.0
    . misses solutions if value of 'accuracy' is less than 10^-14
    . it might still miss some. idk what value of that to choose, so that 
      it dosent miss any values
    . 
  . 
